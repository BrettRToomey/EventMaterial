<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>WaitressTests1</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  WaitressTests.swift
//  TheBodega
//
//  Created by Mikkel Sindberg Eriksen on 26/04/2016.
//  Copyright Â© 2016 Unwire. All rights reserved.
//

import XCTest

class WaitressTests: XCTestCase {

    let waitressName = "Cindy"
    
    var waitress: Waitress!
    
    override func setUp() {
        super.setUp()
        
        self.waitress = Waitress(name: self.waitressName)
    }
    
    
    // MARK: - Test Initialization and Properties etc.
    
    func testThatItInitializes() {
        XCTAssertNotNil(self.waitress)
    }
    
    func testThatItCanHaveAName() {
        XCTAssertEqual(self.waitress.name, self.waitressName)
    }
    
    
    // MARK: - Test Beer Fetching
    
    func testThatItCanBeBusyWhileFetching() {
    
        keyValueObservingExpectationForObject(self.waitress, keyPath: "busy") { object, changes -&gt; Bool in
            return object.busy
        }
        
        self.waitress.fetchBeerFromStorage(MockBeerStore()) { beer, error in
            // Drink beer!
        }
        
        waitForExpectationsWithTimeout(1, handler: nil)
    }
    
    func testThatItCanFetchBeer() {
        
        let fineBeer = Beer()
        let beerStore = MockBeerStore()
        let expectation = expectationWithDescription("Expect beer!")
        
        beerStore.storeBeer(fineBeer)
        
        self.waitress.fetchBeerFromStorage(beerStore) { beer, error in
            XCTAssertEqual(beer, fineBeer)
            expectation.fulfill()
        }

        waitForExpectationsWithTimeout(1, handler: nil)
    
    }

    
    // MARK: - Mocks

    class MockBeerStore: NSObject, BeerStoring {

        var storedBeer: Beer?
    
        func grabBeer() -&gt; Beer! {
            return self.storedBeer
        }
    
        func storeBeer(beer: Beer!) {
            self.storedBeer = beer
        }

    }

}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>BCAD6441-80E7-46DA-B339-CA36ADD6ACE7</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetTitle</key>
	<string>WaitressTests1</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
